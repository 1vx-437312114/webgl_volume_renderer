// cube vertex shader
var cubeVertexShaderStr = "#version 300 es\nuniform mat4 modelViewProjectionMatrix;in vec3 vertex_position;in vec3 vertex_color;out vec4 v_color;\nvoid main(void){gl_Position=modelViewProjectionMatrix*vec4(vertex_position,1.0);\nv_color=vec4(vertex_color,1.0);}";
// cube fragment shader 0 (color shader)
var cubeFragmentShaderStr = "#version 300 es\nprecision mediump float;in vec4 v_color;out vec4 fragColor;\nvoid main(void){fragColor=v_color;}";
// quad vertex shader
var quadVertexShaderStr = "#version 300 es\nuniform mat4 modelViewProjectionMatrix;in vec3 vertex_position;in vec2 vertex_textureCoord;out vec2 texture_coord;\nvoid main(void){gl_Position=vec4(vertex_position,1.0);texture_coord=vertex_textureCoord;}";
// quad fragment shader
var quadFragmentShaderStr = "#version 300 es\nprecision mediump float;precision mediump sampler2D;uniform sampler2D final_image;in vec2 texture_coord;out vec4 fragColor;\nvoid main(void){fragColor=texture(final_image,texture_coord);}";
// raycasting vertex shader
var rayCastingVertexShaderStr = "#version 300 es\nuniform mat4 modelViewProjectionMatrix;in vec3 vertex_position;out vec4 v_position;\nvoid main(){gl_Position=modelViewProjectionMatrix*vec4(vertex_position,1.0);v_position=gl_Position;}";
// raycasting fragment shader
var rayCastingFragmentShaderStr = "#version 300 es\nprecision mediump float;precision mediump sampler3D;\n#define NUM_RAY_STEPS 512\nuniform float step_size;uniform sampler2D frontface_buffer;uniform sampler2D backface_buffer;uniform sampler3D volume_texture;\nuniform sampler2D trfunc_texture;in vec4 v_position;out vec4 fragColor;\nvoid main(){vec2 textureCoord=(v_position.xy/v_position.w+1.0)/2.0;vec4 back_position=texture(backface_buffer,textureCoord);\nvec4 front_position=texture(frontface_buffer,textureCoord);vec3 ray_origin=front_position.xyz;\nvec3 ray_dir = back_position.xyz-ray_origin;float ray_len=length(ray_dir);vec3 delta_dir=normalize(ray_dir)*step_size;\nfloat delta_dir_len = length(delta_dir);vec4 col_acc=vec4(0.0,0.0,0.0,0.0);float alpha_acc=0.0;float length_acc=0.0;\nvec3 ray_pos=ray_origin;for(int i=0;i<NUM_RAY_STEPS;i++){float density=texture(volume_texture,ray_pos).r;vec4 color_sample;\ncolor_sample=texture(trfunc_texture,vec2(density,0.5));float alpha_sample=density*step_size;\ncol_acc+=(1.0-alpha_acc)*color_sample*alpha_sample*40.0;alpha_acc+=alpha_sample;length_acc+=delta_dir_len;ray_pos+=delta_dir;\nif(length_acc>=ray_len||alpha_acc>1.0)break;}fragColor=col_acc;}";
// raycasting fragment shader (maximum intensity projection)
var rayCastingMIPFragmentShaderStr = "#version 300 es\nprecision mediump float;precision mediump sampler3D;\n#define NUM_RAY_STEPS 512\nuniform float step_size;uniform sampler2D frontface_buffer;uniform sampler2D backface_buffer;uniform sampler3D volume_texture;\nuniform sampler2D trfunc_texture;in vec4 v_position;out vec4 fragColor;void main(){\nvec2 textureCoord=(v_position.xy/v_position.w+1.0)/2.0;vec4 back_position=texture(backface_buffer, textureCoord);\nvec4 front_position=texture(frontface_buffer, textureCoord);vec3 ray_origin=front_position.xyz;\nvec3 ray_dir=back_position.xyz-ray_origin;float ray_len=length(ray_dir);vec3 delta_dir=normalize(ray_dir)*step_size;\nfloat delta_dir_len=length(delta_dir);float alpha_acc=0.0;float length_acc=0.0;vec3 ray_pos=ray_origin;float max_val=0.0;\nfor(int i=0;i<NUM_RAY_STEPS;i++){float density = texture(volume_texture,ray_pos).r;float alpha_sample=density*step_size;\nalpha_acc+=alpha_sample;max_val=max(max_val,density);length_acc+=delta_dir_len;ray_pos+=delta_dir;\nif(length_acc>=ray_len||alpha_acc>1.0)break;}fragColor=texture(trfunc_texture,vec2(max_val,0.5));}";
